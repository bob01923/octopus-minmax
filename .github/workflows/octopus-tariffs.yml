name: Octopus Energy Tariff Monitor - Full Data

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  tariff-monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch and display full tariff data
        env:
          DISCORD_WEBHOOK: ${{ secrets.NOTIFICATION_URLS }}
          OCTOPUS_API_KEY: ${{ secrets.API_KEY }}
          ACCOUNT_NUMBER: ${{ secrets.ACC_NUMBER }}
        run: |
          TODAY=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          TOMORROW=$(date -u -d '+1 day' +%Y-%m-%dT%H:%M:%SZ)
          TODAY_FORMATTED=$(date '+%A, %d %B %Y')
          
          echo "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø Fetching full tariff data for Eastern England..."
          
          # Fetch Agile rates (next few hours)
          echo "‚ö° Fetching Agile rates..."
          AGILE_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" \
            "https://api.octopus.energy/v1/products/AGILE-24-10-01/electricity-tariffs/E-1R-AGILE-24-10-01-A/standard-unit-rates/?period_from=${TODAY}&period_to=${TOMORROW}&page_size=12")
          
          # Fetch Tracker rates
          echo "üìä Fetching Tracker rates..."
          TRACKER_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" \
            "https://api.octopus.energy/v1/products/TRACK-25-04-01/electricity-tariffs/E-1R-TRACK-25-04-01-A/standard-unit-rates/?page_size=3")
          
          # Process Agile data for next 6 periods
          echo "Processing Agile data..."
          AGILE_RATES=$(echo "$AGILE_DATA" | python3 -c "
          import json, sys
          try:
              data = json.load(sys.stdin)
              rates = data.get('results', [])[:6]
              for rate in rates:
                  time = rate['valid_from'][11:16]
                  price = rate['value_inc_vat']
                  print(f'  ‚Ä¢ {time}: {price:.2f}p/kWh')
          except:
              print('  ‚Ä¢ Unable to parse rates')
          ")
          
          # Process Tracker data
          echo "Processing Tracker data..."
          TRACKER_RATE=$(echo "$TRACKER_DATA" | python3 -c "
          import json, sys
          try:
              data = json.load(sys.stdin)
              rate = data.get('results', [{}])[0].get('value_inc_vat', 'N/A')
              print(f'{rate}p/kWh' if rate != 'N/A' else 'N/A')
          except:
              print('N/A')
          ")
          
          # Create comprehensive Discord message using cat with EOF
          cat << EOF > /tmp/discord_message.json
          {
            "content": "üîã **Daily Energy Tariff Report - Eastern England**\nüìÖ ${TODAY_FORMATTED}\n\n‚ö° **Agile Octopus** (Next 3 hours):\n${AGILE_RATES}\n\nüìä **Tracker v2**: ${TRACKER_RATE}\n‚Ä¢ Daily wholesale-based pricing\n‚Ä¢ Capped at 100p/kWh\n\nüöó **Octopus Go**:\n‚Ä¢ **7.5p/kWh** overnight (00:30-04:30)\n‚Ä¢ Standard day rate other times\n‚Ä¢ Perfect for EV charging\n\nüè† **Cosy Octopus**:\n‚Ä¢ **3 off-peak periods**: 4-7am, 1-4pm, 10pm-12am\n‚Ä¢ **51% cheaper** during off-peak\n‚Ä¢ **45% more expensive** 4-7pm peak\n\nüí° **Usage Tips**:\n‚Ä¢ **Agile**: Use cheapest half-hour periods\n‚Ä¢ **Tracker**: Consistent daily wholesale rates\n‚Ä¢ **Go**: Charge EV during 4-hour window\n‚Ä¢ **Cosy**: Run heat pump in off-peak slots\n\nüè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø **Region**: Eastern England (A)\nüë§ **Account**: ${ACCOUNT_NUMBER:0:4}...\n\n_Rates include VAT. Data from Octopus Energy API._"
          }
          EOF
          
          # Send to Discord
          echo "üì® Sending comprehensive report to Discord..."
          curl -H "Content-Type: application/json" \
               -d @/tmp/discord_message.json \
               "$DISCORD_WEBHOOK"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully sent full tariff report to Discord"
          else
            echo "‚ùå Failed to send to Discord"
          fi
