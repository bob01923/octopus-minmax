name: Daily Energy Rates - Eastern England (with Error Handling)

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  daily-rates:
    runs-on: ubuntu-latest
    steps:
      - name: Get tariff rates with API validation
        env:
          DISCORD_WEBHOOK: ${{ secrets.NOTIFICATION_URLS }}
          OCTOPUS_API_KEY: ${{ secrets.API_KEY }}
        run: |
          TODAY=$(date -u +%Y-%m-%dT00:00:00Z)
          TOMORROW=$(date -u -d '+1 day' +%Y-%m-%dT00:00:00Z)
          TODAY_FORMATTED=$(date '+%A, %d %B %Y')

          # 1. TEST API CONNECTION FIRST
          echo "üîå Testing API connection..."
          API_STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -u "${OCTOPUS_API_KEY}:" "https://api.octopus.energy/v1/products/")

          if [ "$API_STATUS_CODE" != "200" ]; then
            echo "‚ùå API Authentication Failed (HTTP Status: $API_STATUS_CODE)"
            ERROR_MESSAGE="‚ùå **API Authentication Failed**\nYour API_KEY secret may be incorrect or expired. Please verify it on the Octopus Energy dashboard.\nStatus Code: $API_STATUS_CODE"
            curl -H "Content-Type: application/json" -d "{\"content\":\"$ERROR_MESSAGE\"}" "$DISCORD_WEBHOOK"
            exit 1
          else
            echo "‚úÖ API connection successful."
          fi

          # 2. FETCH DATA FROM ALL ENDPOINTS
          echo "Fetching rates for ${TODAY_FORMATTED}..."
          AGILE_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" "https://api.octopus.energy/v1/products/AGILE-24-10-01/electricity-tariffs/E-1R-AGILE-24-10-01-A/standard-unit-rates/?period_from=${TODAY}&period_to=${TOMORROW}&page_size=48")
          TRACKER_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" "https://api.octopus.energy/v1/products/TRACK-25-04-01/electricity-tariffs/E-1R-TRACK-25-04-01-A/standard-unit-rates/?page_size=1")
          GO_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" "https://api.octopus.energy/v1/products/GO-22-10-14/electricity-tariffs/E-1R-GO-22-10-14-A/standard-unit-rates/?page_size=48")
          COSY_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" "https://api.octopus.energy/v1/products/COSY-22-12-08/electricity-tariffs/E-1R-COSY-22-12-08-A/standard-unit-rates/?page_size=48")

          # 3. PROCESS DATA WITH PYTHON AND HANDLE EMPTY RESULTS
          python3 << 'EOF'
          import json
          import os
          import requests
          from datetime import datetime

          webhook_url = os.environ['DISCORD_WEBHOOK']
          today = datetime.now().strftime('%A, %d %B %Y')

          def format_rates(data_str, tariff_name):
              try:
                  data = json.loads(data_str)
                  rates = data.get('results', [])
                  if not rates:
                      return f"  ‚Ä¢ No {tariff_name} data available for this period\n"
                  
                  # Sort by time just in case
                  sorted_rates = sorted(rates, key=lambda x: x['valid_from'])
                  rate_text = ""
                  for rate in sorted_rates:
                      time_from = rate['valid_from'][11:16]
                      price = rate['value_inc_vat']
                      rate_text += f"  ‚Ä¢ {time_from}: {price:.2f}p/kWh\n"
                  return rate_text
              except json.JSONDecodeError:
                  return f"  ‚Ä¢ Error parsing {tariff_name} data\n"

          message = f"üîã **Daily Energy Rates - Eastern England**\nüìÖ {today}\n\n"
          
          # Add each tariff's data to the message
          message += "‚ö° **Agile Octopus**:\n" + format_rates(os.environ.get('AGILE_DATA', '{}'), "Agile")
          message += "\nüìä **Tracker v2**:\n" + format_rates(os.environ.get('TRACKER_DATA', '{}'), "Tracker")
          message += "\nüöó **Octopus Go**:\n" + format_rates(os.environ.get('GO_DATA', '{}'), "Go")
          message += "\nüè† **Cosy Octopus**:\n" + format_rates(os.environ.get('COSY_DATA', '{}'), "Cosy")
          
          message += f"\nüè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø Eastern England (Region A)\n_If data is missing, it may be an Octopus platform issue._"

          # Send to Discord
          payload = {"content": message}
          requests.post(webhook_url, json=payload)
          print("‚úÖ Report generation complete.")
          EOF
          
          # Export all data for the Python script
          echo "AGILE_DATA<<EOF" >> $GITHUB_ENV; echo "$AGILE_DATA" >> $GITHUB_ENV; echo "EOF" >> $GITHUB_ENV
          echo "TRACKER_DATA<<EOF" >> $GITHUB_ENV; echo "$TRACKER_DATA" >> $GITHUB_ENV; echo "EOF" >> $GITHUB_ENV
          echo "GO_DATA<<EOF" >> $GITHUB_ENV; echo "$GO_DATA" >> $GITHUB_ENV; echo "EOF" >> $GITHUB_ENV
          echo "COSY_DATA<<EOF" >> $GITHUB_ENV; echo "$COSY_DATA" >> $GITHUB_ENV; echo "EOF" >> $GITHUB_ENV
