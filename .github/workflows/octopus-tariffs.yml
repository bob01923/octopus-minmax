name: Daily Energy Rates - Eastern England

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  daily-rates:
    runs-on: ubuntu-latest
    steps:
      - name: Get all tariff rates for today
        env:
          DISCORD_WEBHOOK: ${{ secrets.NOTIFICATION_URLS }}
          OCTOPUS_API_KEY: ${{ secrets.API_KEY }}
        run: |
          TODAY=$(date -u +%Y-%m-%dT00:00:00Z)
          TOMORROW=$(date -u -d '+1 day' +%Y-%m-%dT00:00:00Z)
          TODAY_FORMATTED=$(date '+%A, %d %B %Y')
          
          echo "Fetching rates for ${TODAY_FORMATTED}..."
          
          # Get Agile rates (48 half-hourly periods)
          AGILE_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" \
            "https://api.octopus.energy/v1/products/AGILE-24-10-01/electricity-tariffs/E-1R-AGILE-24-10-01-A/standard-unit-rates/?period_from=${TODAY}&period_to=${TOMORROW}&page_size=48")
          
          # Get Tracker rate
          TRACKER_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" \
            "https://api.octopus.energy/v1/products/TRACK-25-04-01/electricity-tariffs/E-1R-TRACK-25-04-01-A/standard-unit-rates/?page_size=1")
          
          # Build message with Python
          python3 << 'EOF'
          import json
          import os
          import requests
          from datetime import datetime
          
          webhook_url = os.environ['DISCORD_WEBHOOK']
          agile_raw = os.environ.get('AGILE_DATA', '{}')
          tracker_raw = os.environ.get('TRACKER_DATA', '{}')
          
          try:
              agile_data = json.loads(agile_raw)
              tracker_data = json.loads(tracker_raw)
              
              today = datetime.now().strftime('%A, %d %B %Y')
              
              # Build message
              message = f"🔋 **Daily Energy Rates - Eastern England**\n📅 {today}\n\n"
              
              # Agile rates
              message += "⚡ **Agile Octopus** (Half-hourly rates):\n"
              for rate in agile_data.get('results', []):
                  time = rate['valid_from'][11:16]
                  price = rate['value_inc_vat']
                  message += f"  • {time}: {price:.2f}p/kWh\n"
              
              # Tracker rate
              tracker_rate = tracker_data.get('results', [{}])[0].get('value_inc_vat', 'N/A')
              message += f"\n📊 **Tracker v2**: {tracker_rate}p/kWh\n"
              
              # Go rates (fixed schedule)
              message += "\n🚗 **Octopus Go**:\n"
              message += "  • 00:30-04:30: 7.5p/kWh\n"
              message += "  • All other times: ~20p/kWh\n"
              
              # Cosy rates (fixed schedule)
              message += "\n🏠 **Cosy Octopus**:\n"
              message += "  • 04:00-07:00: 12.25p/kWh\n"
              message += "  • 13:00-16:00: 12.25p/kWh\n"
              message += "  • 22:00-00:00: 12.25p/kWh\n"
              message += "  • All other times: 36.25p/kWh\n"
              
              message += f"\n🏴󠁧󠁢󠁥󠁮󠁧󠁿 Eastern England (Region A)"
              
              # Send to Discord
              payload = {"content": message}
              response = requests.post(webhook_url, json=payload)
              
              if response.status_code == 204:
                  print("✅ Daily rates sent to Discord")
              else:
                  print(f"❌ Discord failed: {response.status_code}")
                  
          except Exception as e:
              print(f"Error: {e}")
          EOF
          
          # Export for Python
          echo "AGILE_DATA<<EOF" >> $GITHUB_ENV
          echo "$AGILE_DATA" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "TRACKER_DATA<<EOF" >> $GITHUB_ENV
          echo "$TRACKER_DATA" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
