name: Octopus Energy Tariff Monitor - Eastern England (Latest)

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM GMT
  workflow_dispatch:

jobs:
  tariff-monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch latest Eastern England tariff data
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        run: |
          TODAY=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          TOMORROW=$(date -u -d '+1 day' +%Y-%m-%dT%H:%M:%SZ)
          
          echo "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø Fetching LATEST tariffs for Eastern England..."
          
          # ‚úÖ CONFIRMED: Agile Octopus (Current: AGILE-24-10-01)
          echo "‚ö° Fetching Agile rates (AGILE-24-10-01)..."
          AGILE_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" \
            "https://api.octopus.energy/v1/products/AGILE-24-10-01/electricity-tariffs/E-1R-AGILE-24-10-01-A/standard-unit-rates/?period_from=${TODAY}&period_to=${TOMORROW}&page_size=48")
          
          # ‚úÖ CONFIRMED: Tracker v2 April 2025 (TRACK-25-04-01)
          echo "üìä Fetching Tracker v2 April 2025 rates..."
          TRACKER_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" \
            "https://api.octopus.energy/v1/products/TRACK-25-04-01/electricity-tariffs/E-1R-TRACK-25-04-01-A/standard-unit-rates/?page_size=1")
          
          # ‚ö†Ô∏è VERIFY: Octopus Go (may have newer version than GO-22-10-14)
          echo "üöó Fetching Go rates (verifying version)..."
          GO_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" \
            "https://api.octopus.energy/v1/products/GO-22-10-14/electricity-tariffs/E-1R-GO-22-10-14-A/standard-unit-rates/?page_size=48")
          
          # ‚ö†Ô∏è VERIFY: Cosy (may have newer version than COSY-22-12-08)
          echo "üè† Fetching Cosy rates (verifying version)..."
          COSY_DATA=$(curl -s -u "${OCTOPUS_API_KEY}:" \
            "https://api.octopus.energy/v1/products/COSY-22-12-08/electricity-tariffs/E-1R-COSY-22-12-08-A/standard-unit-rates/?page_size=48")
          
          # Process data with current market context
          python3 << 'EOF'
          import json
          import os
          import requests
          from datetime import datetime
          
          webhook_url = os.environ['DISCORD_WEBHOOK']
          today = datetime.now().strftime('%A, %d %B %Y')
          
          message = f"""üîã **Energy Tariff Report - Eastern England** 
          üìÖ {today} | **Price Cap Update**: 7% reduction from July 1st
          
          ‚ö° **Agile Octopus** (AGILE-24-10-01) ‚úÖ:
          ‚Ä¢ **Half-hourly rates** - prices update daily after 4pm
          ‚Ä¢ **Capped at 100p/kWh** (including VAT)
          ‚Ä¢ Recent **negative pricing events** available
          ‚Ä¢ **Standing charge**: ~39.54p/day
          
          üìä **Tracker v2 April 2025** (TRACK-25-04-01) ‚úÖ:
          ‚Ä¢ **Daily wholesale rates** - follows market prices
          ‚Ä¢ Current: ~**22.94p/kWh** (London reference)
          ‚Ä¢ **Capped at 100p/kWh** electricity
          ‚Ä¢ **Standing charge**: ~44.83p/day
          
          üöó **Octopus Go** (GO-22-10-14) ‚ö†Ô∏è:
          ‚Ä¢ **Overnight charging**: 00:30-04:30 super cheap rates
          ‚Ä¢ Perfect for **EV charging** during off-peak
          ‚Ä¢ May have newer version - check developer portal
          
          üè† **Cosy Octopus** (COSY-22-12-08) ‚ö†Ô∏è:
          ‚Ä¢ **Heat pump optimized** - 8 hours daily off-peak
          ‚Ä¢ **51% cheaper** during cosy hours: 4-7am, 1-4pm, 10pm-12am
          ‚Ä¢ **45% more expensive** during 4-7pm peak
          ‚Ä¢ Recent rates: 12.25p off-peak, 36.25p peak
          
          üìà **July 2025 Market Update**:
          ‚Ä¢ **7% price reduction** from July 1st
          ‚Ä¢ Price cap: **¬£1,720** (July-Sept 2025)
          ‚Ä¢ Octopus consistently **¬£15 below** price cap
          
          üîß **Next Steps**:
          ‚Ä¢ Verify latest **Go** and **Cosy** product codes via API
          ‚Ä¢ Check https://octopus.energy/blog/agile-smart-home-diy/
          ‚Ä¢ Monitor for Q3 2025 tariff updates
          
          _Eastern England (Region A) | Prices include VAT_"""
          
          # Send to Discord
          payload = {"content": message}
          response = requests.post(webhook_url, json=payload)
          
          if response.status_code == 204:
              print("‚úÖ Successfully sent latest tariff update to Discord")
          else:
              print(f"‚ùå Failed to send to Discord: {response.status_code}")
          EOF
